// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package clickhouse

import (
	"context"
	"database/sql"
	"sync"
)

// dbConnectionMock is a mock implementation of dbConnection.
//
// 	func TestSomethingThatUsesdbConnection(t *testing.T) {
//
// 		// make and configure a mocked dbConnection
// 		mockeddbConnection := &dbConnectionMock{
// 			CloseFunc: func() error {
// 				panic("mock out the Close method")
// 			},
// 			PingFunc: func() error {
// 				panic("mock out the Ping method")
// 			},
// 			QueryContextFunc: func(ctx context.Context, query string, args ...interface{}) (*sql.Rows, error) {
// 				panic("mock out the QueryContext method")
// 			},
// 		}
//
// 		// use mockeddbConnection in code that requires dbConnection
// 		// and then make assertions.
//
// 	}
type dbConnectionMock struct {
	// CloseFunc mocks the Close method.
	CloseFunc func() error

	// PingFunc mocks the Ping method.
	PingFunc func() error

	// QueryContextFunc mocks the QueryContext method.
	QueryContextFunc func(ctx context.Context, query string, args ...interface{}) (*sql.Rows, error)

	// calls tracks calls to the methods.
	calls struct {
		// Close holds details about calls to the Close method.
		Close []struct {
		}
		// Ping holds details about calls to the Ping method.
		Ping []struct {
		}
		// QueryContext holds details about calls to the QueryContext method.
		QueryContext []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Query is the query argument value.
			Query string
			// Args is the args argument value.
			Args []interface{}
		}
	}
	lockClose        sync.RWMutex
	lockPing         sync.RWMutex
	lockQueryContext sync.RWMutex
}

// Close calls CloseFunc.
func (mock *dbConnectionMock) Close() error {
	if mock.CloseFunc == nil {
		panic("dbConnectionMock.CloseFunc: method is nil but dbConnection.Close was just called")
	}
	callInfo := struct {
	}{}
	mock.lockClose.Lock()
	mock.calls.Close = append(mock.calls.Close, callInfo)
	mock.lockClose.Unlock()
	return mock.CloseFunc()
}

// CloseCalls gets all the calls that were made to Close.
// Check the length with:
//     len(mockeddbConnection.CloseCalls())
func (mock *dbConnectionMock) CloseCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockClose.RLock()
	calls = mock.calls.Close
	mock.lockClose.RUnlock()
	return calls
}

// Ping calls PingFunc.
func (mock *dbConnectionMock) Ping() error {
	if mock.PingFunc == nil {
		panic("dbConnectionMock.PingFunc: method is nil but dbConnection.Ping was just called")
	}
	callInfo := struct {
	}{}
	mock.lockPing.Lock()
	mock.calls.Ping = append(mock.calls.Ping, callInfo)
	mock.lockPing.Unlock()
	return mock.PingFunc()
}

// PingCalls gets all the calls that were made to Ping.
// Check the length with:
//     len(mockeddbConnection.PingCalls())
func (mock *dbConnectionMock) PingCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockPing.RLock()
	calls = mock.calls.Ping
	mock.lockPing.RUnlock()
	return calls
}

// QueryContext calls QueryContextFunc.
func (mock *dbConnectionMock) QueryContext(ctx context.Context, query string, args ...interface{}) (*sql.Rows, error) {
	if mock.QueryContextFunc == nil {
		panic("dbConnectionMock.QueryContextFunc: method is nil but dbConnection.QueryContext was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Query string
		Args  []interface{}
	}{
		Ctx:   ctx,
		Query: query,
		Args:  args,
	}
	mock.lockQueryContext.Lock()
	mock.calls.QueryContext = append(mock.calls.QueryContext, callInfo)
	mock.lockQueryContext.Unlock()
	return mock.QueryContextFunc(ctx, query, args...)
}

// QueryContextCalls gets all the calls that were made to QueryContext.
// Check the length with:
//     len(mockeddbConnection.QueryContextCalls())
func (mock *dbConnectionMock) QueryContextCalls() []struct {
	Ctx   context.Context
	Query string
	Args  []interface{}
} {
	var calls []struct {
		Ctx   context.Context
		Query string
		Args  []interface{}
	}
	mock.lockQueryContext.RLock()
	calls = mock.calls.QueryContext
	mock.lockQueryContext.RUnlock()
	return calls
}
