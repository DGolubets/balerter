// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package runner

import (
	"sync"
)

// jobMock is a mock implementation of job.
//
// 	func TestSomethingThatUsesjob(t *testing.T) {
//
// 		// make and configure a mocked job
// 		mockedjob := &jobMock{
// 			NameFunc: func() string {
// 				panic("mock out the Name method")
// 			},
// 			RunFunc: func()  {
// 				panic("mock out the Run method")
// 			},
// 		}
//
// 		// use mockedjob in code that requires job
// 		// and then make assertions.
//
// 	}
type jobMock struct {
	// NameFunc mocks the Name method.
	NameFunc func() string

	// RunFunc mocks the Run method.
	RunFunc func()

	// calls tracks calls to the methods.
	calls struct {
		// Name holds details about calls to the Name method.
		Name []struct {
		}
		// Run holds details about calls to the Run method.
		Run []struct {
		}
	}
	lockName sync.RWMutex
	lockRun  sync.RWMutex
}

// Name calls NameFunc.
func (mock *jobMock) Name() string {
	if mock.NameFunc == nil {
		panic("jobMock.NameFunc: method is nil but job.Name was just called")
	}
	callInfo := struct {
	}{}
	mock.lockName.Lock()
	mock.calls.Name = append(mock.calls.Name, callInfo)
	mock.lockName.Unlock()
	return mock.NameFunc()
}

// NameCalls gets all the calls that were made to Name.
// Check the length with:
//     len(mockedjob.NameCalls())
func (mock *jobMock) NameCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockName.RLock()
	calls = mock.calls.Name
	mock.lockName.RUnlock()
	return calls
}

// Run calls RunFunc.
func (mock *jobMock) Run() {
	if mock.RunFunc == nil {
		panic("jobMock.RunFunc: method is nil but job.Run was just called")
	}
	callInfo := struct {
	}{}
	mock.lockRun.Lock()
	mock.calls.Run = append(mock.calls.Run, callInfo)
	mock.lockRun.Unlock()
	mock.RunFunc()
}

// RunCalls gets all the calls that were made to Run.
// Check the length with:
//     len(mockedjob.RunCalls())
func (mock *jobMock) RunCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockRun.RLock()
	calls = mock.calls.Run
	mock.lockRun.RUnlock()
	return calls
}
